import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  FaTruck, 
  FaTools, 
  FaShieldAlt, 
  FaArrowRight,
  FaStar,
  FaCheckCircle,
  FaTimesCircle,
  FaShoppingCart
} from 'react-icons/fa';
import { useAdminData } from '../context/AdminDataContext';
import { useCartActions } from '../hooks/useCartActions';
// wishlist removed
import { getMainImage, isImageUrl, resolveImageSrc } from '../utils/imageHelpers';
import BrandMark from '../components/BrandMark';
import { getIconForEmoji } from '../utils/iconMap.jsx';
import Reveal from '../components/Reveal';
import './Home.css';

function Home() {
  const navigate = useNavigate();
  const HERO_IMAGE_URL = 'https://images.pexels.com/photos/162553/engine-displacement-piston-162553.jpeg?auto=compress&cs=tinysrgb&w=1600';
  const { products, popularProductIds, aboutContent } = useAdminData();
  const { addToCartWithNotification } = useCartActions();
  
  // wishlist removed
  
  const handleAddToCart = (product, e) => {
    e.preventDefault();
    e.stopPropagation();
    addToCartWithNotification(product, 1);
  };
  
  const features = [
    {
      icon: <FaTruck />,
      title: "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
      text: "–î–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏"
    },
    {
      icon: <FaTools />,
      title: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏",
      text: "–¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏"
    },
    {
      icon: <FaShieldAlt />,
      title: "–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞",
      text: "–ü–æ–ª–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    }
  ];

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ ID
  const popularProducts = popularProductIds
    .map(id => products.find(product => product.id === id))
    .filter(product => product) // –£–±–∏—Ä–∞–µ–º undefined –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    .map(product => ({
      id: product.id,
      title: product.title,
      price: `${product.price.toLocaleString()} ‚ÇΩ`,
      icon: getMainImage(product)?.data
    }));

  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏:
  const _originalPopularProducts = [
    {
      id: 11,
      title: "–ì—É—Å–µ–Ω–∏—Ü—ã –¥–ª—è –≤–µ–∑–¥–µ—Ö–æ–¥–∞",
      price: "45,000 ‚ÇΩ",
      icon: "üîó"
    },
    {
      id: 1,
      title: "–î–≤–∏–≥–∞—Ç–µ–ª—å 2.0L –¥–∏–∑–µ–ª—å–Ω—ã–π",
      price: "180,000 ‚ÇΩ",
      icon: "‚öôÔ∏è"
    },
    {
      id: 8,
      title: "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è",
      price: "95,000 ‚ÇΩ",
      icon: "üîß"
    },
    {
      id: 12,
      title: "–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π",
      price: "12,000 ‚ÇΩ",
      icon: "üõ†Ô∏è"
    },
    {
      id: 15,
      title: "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä 12V 100Ah",
      price: "15,000 ‚ÇΩ",
      icon: "üîã"
    },
    {
      id: 17,
      title: "–°–∏–¥–µ–Ω—å–µ –≤–æ–¥–∏—Ç–µ–ª—è",
      price: "25,000 ‚ÇΩ",
      icon: "ü™ë"
    }
  ];

  return (
    <div>
      {(() => {
        return (
          <section className="hero">
            <div className="container">
              <div className="hero-content">
                <div className="hero-text">
                  <motion.h1 
                    className="hero-title"
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 0.2 }}
                  >
                    {(() => {
                      const title = aboutContent?.homeHero?.title || '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤';
                      if (title.includes('\n')) {
                        return title.split('\n').map((line, index) => (
                          <span key={index} style={{ display: 'block' }}>
                            {line}
                          </span>
                        ));
                      }
                      return title;
                    })()}
                  </motion.h1>
                  <motion.div 
                    className="hero-description"
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 0.4 }}
                  >
                    {(() => {
                      const description = aboutContent?.homeHero?.description || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.';
                      if (description.includes('\n')) {
                        return description.split('\n').map((line, index) => (
                          <p key={index} style={{ margin: index > 0 ? '0.05em 0 0 0' : '0' }}>
                            {line}
                          </p>
                        ));
                      }
                      return <p>{description}</p>;
                    })()}
                  </motion.div>
                  <motion.div 
                    className="hero-cta-group"
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 0.6 }}
                  >
                    <Link to={aboutContent?.homeHero?.ctaLink || '/catalog'} className="cta-button">
                      {aboutContent?.homeHero?.ctaText || '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥'}
                      <FaArrowRight />
                    </Link>
                    <Link
                      to={aboutContent?.homeHero?.secondaryCtaLink || "/about#contacts"}
                      className="cta-button secondary"
                      onClick={(e) => {
                        e.preventDefault();
                        const link = aboutContent?.homeHero?.secondaryCtaLink || "/about#contacts";
                        if (link.includes('#contacts')) {
                          navigate('/about#contacts');
                          setTimeout(() => {
                            const el = document.getElementById('contacts');
                            if (el) el.scrollIntoView({ behavior: 'smooth' });
                          }, 50);
                        } else {
                          navigate(link);
                        }
                      }}
                    >
                      {aboutContent?.homeHero?.secondaryCtaText || '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'}
                    </Link>
                  </motion.div>
                </div>
              </div>
            </div>
          </section>
        );
      })()}
      

      <section className="features">
        <div className="container">
          <Reveal type="up">
            <h2 className="section-title">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å</h2>
          </Reveal>
          <div className="features-grid">
            {features.map((feature, index) => (
              <Reveal key={index} type="up" delay={index * 0.1}>
                <div className="feature-card">
                  <div className="feature-icon">
                    {typeof feature.icon === 'string' ? getIconForEmoji(feature.icon) : feature.icon}
                  </div>
                  <h3 className="feature-title">{feature.title}</h3>
                  <p className="feature-text">{feature.text}</p>
                </div>
              </Reveal>
            ))}
          </div>
        </div>
      </section>

      <section className="products popular-products">
        <div className="container">
          <Reveal type="up">
            <h2 className="section-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h2>
          </Reveal>

          {popularProducts.length === 0 ? (
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                padding: '2rem',
                borderRadius: '16px',
                border: '1px solid rgba(255,255,255,0.1)',
                background: 'linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.02))',
                boxShadow: '0 10px 30px rgba(0,0,0,0.2)',
                textAlign: 'center'
              }}
            >
              <div>
                <div style={{ fontSize: '2.2rem', color: '#ffd166', marginBottom: '0.5rem' }}>
                  <FaStar style={{ verticalAlign: 'middle' }} />
                </div>
                <h3 style={{ margin: '0 0 0.5rem' }}>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</h3>
                <p style={{ opacity: 0.85, margin: '0 0 1rem' }}>
                  –°–µ–π—á–∞—Å –º—ã —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–∫—É–ø–∫–∞–º. –í –∫–∞—Ç–∞–ª–æ–≥–µ —É–∂–µ –º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
                </p>
                <Link to="/catalog" className="cta-button">
                  –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ <FaArrowRight />
                </Link>
              </div>
            </div>
          ) : (
            <div className="catalog-grid">
              {popularProducts.map((product, i) => {
                const productData = products.find(p => p.id === product.id);
                return (
                  <Reveal key={product.id} type="up" delay={i * 0.05}>
                    <div 
                      className="catalog-card"
                      onClick={() => navigate(`/product/${product.id}`)}
                      style={{ cursor: 'pointer' }}
                    >
                      <div className="catalog-card-image">
                        {(() => {
                          if (!productData) return (
                            <span className="catalog-card-icon" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                              <BrandMark alt={product.title} style={{ height: 64 }} />
                            </span>
                          );
                          const mainImage = getMainImage(productData);
                          if (mainImage?.data) {
                            const resolved = typeof mainImage.data === 'string' ? resolveImageSrc(mainImage.data) : null;
                            if (
                              (typeof mainImage.data === 'string' && mainImage.data.startsWith('data:image')) ||
                              (resolved && isImageUrl(resolved))
                            ) {
                              return (
                                <img
                                  src={resolved || mainImage.data}
                                  alt={product.title}
                                  className="catalog-product-image"
                                />
                              );
                            }
                          }
                          return (
                            <span className="catalog-card-icon" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                              <BrandMark alt={product.title} style={{ height: 64 }} />
                            </span>
                          );
                        })()}
                      </div>
                      <div className="catalog-card-info">
                        <div className="catalog-card-header">
                          <h3>{product.title}</h3>
                        </div>
                        
                        <div className="catalog-card-price-section">
                          <div className="catalog-card-price">{product.price}</div>
                        </div>
                        
                        <div className="catalog-card-actions">
                          <div className="catalog-card-meta">
                            <span className={productData?.available ? 'in-stock' : 'out-of-stock'}>
                              {productData?.available ? <FaCheckCircle /> : <FaTimesCircle />} {productData?.available ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                            </span>
                          </div>
                          <button 
                            className="catalog-card-btn"
                            onClick={(e) => handleAddToCart(productData, e)}
                            disabled={!productData?.available}
                          >
                            <FaShoppingCart /> –í –∫–æ—Ä–∑–∏–Ω—É
                          </button>
                        </div>
                      </div>
                    </div>
                  </Reveal>
                );
              })}
            </div>
          )}
        </div>
      </section>
    </div>
  );
}

export default Home;
