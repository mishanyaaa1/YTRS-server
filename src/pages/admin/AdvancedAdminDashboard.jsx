import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAdminData } from '../../context/AdminDataContext';
import ProductManagement from './ProductManagement';
import CategoryManagement from './CategoryManagement';
import PromotionManagement from './PromotionManagement';
import PromocodeManagement from './PromocodeManagement';
import ContentManagement from './ContentManagement';
import PopularProductsManagement from './PopularProductsManagement';
import OrderManagement from './OrderManagement';
import AdvertisingManagement from './AdvertisingManagement';
import FilterManagement from './FilterManagement';
import VehiclesManagement from './VehiclesManagement';
import VehicleTypesManagement from './VehicleTypesManagement';
import BotManagement from './BotManagement';

import { migrateProductImages, getMainImage } from '../../utils/imageHelpers';
import BrandMark from '../../components/BrandMark';
import { FaHome, FaBox, FaTags, FaUsers, FaChartBar, FaSignOutAlt, FaEdit, FaStar, FaShoppingCart, FaAd, FaFilter, FaTag, FaTruck, FaRobot, FaCog } from 'react-icons/fa';
import './AdvancedAdminDashboard.css';
import BrandLogo from '../../components/BrandLogo';

function AdvancedAdminDashboard() {
  const navigate = useNavigate();
  const { products, promotions, promocodes, vehicles, popularProductIds } = useAdminData();
  const [activeSection, setActiveSection] = useState('overview');

  useEffect(() => {
    let canceled = false;
    (async () => {
      try {
        const res = await fetch('/api/admin/me', { credentials: 'include' });
        if (!res.ok) throw new Error('unauth');
      } catch (_) {
        if (!canceled) navigate('/admin');
      }
    })();
    return () => { canceled = true; };
  }, [navigate]);

  const handleLogout = async () => {
    try {
      await fetch('/api/admin/logout', { method: 'POST', credentials: 'include' });
    } finally {
      navigate('/admin');
    }
  };

  const menuItems = [
    { id: 'overview', label: '–û–±–∑–æ—Ä', icon: <FaChartBar /> },
    { id: 'products', label: '–¢–æ–≤–∞—Ä—ã', icon: <FaBox /> },
    { id: 'categories', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', icon: <FaTags /> },
    { id: 'popular', label: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', icon: <FaStar /> },
    { id: 'promotions', label: '–ê–∫—Ü–∏–∏', icon: <FaTags /> },
    { id: 'promocodes', label: '–ü—Ä–æ–º–æ–∫–æ–¥—ã', icon: <FaTag /> },
    { id: 'orders', label: '–ó–∞–∫–∞–∑—ã', icon: <FaShoppingCart /> },
    { id: 'vehicles', label: '–í–µ–∑–¥–µ—Ö–æ–¥—ã', icon: <FaTruck /> },
    { id: 'vehicleTypes', label: '–¢–∏–ø—ã –≤–µ–∑–¥–µ—Ö–æ–¥–æ–≤', icon: <FaCog /> },
    { id: 'filters', label: '–§–∏–ª—å—Ç—Ä—ã', icon: <FaFilter /> },
    { id: 'content', label: '–ö–æ–Ω—Ç–µ–Ω—Ç', icon: <FaEdit /> },
    { id: 'advertising', label: '–†–µ–∫–ª–∞–º–∞', icon: <FaAd /> },
    { id: 'bot', label: 'Telegram –±–æ—Ç', icon: <FaRobot /> }
  ];

  const renderOverview = () => (
    <div className="overview-section">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å–∫—Ä—ã—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–µ—Ä—Ö—É */}
      
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">üì¶</div>
          <div className="stat-content">
            <div className="stat-number">{products.length}</div>
            <div className="stat-label">–¢–æ–≤–∞—Ä–æ–≤</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üéØ</div>
          <div className="stat-content">
            <div className="stat-number">{promotions.length}</div>
            <div className="stat-label">–ê–∫—Ü–∏–π</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üé´</div>
          <div className="stat-content">
            <div className="stat-number">{promocodes.length}</div>
            <div className="stat-label">–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-content">
            <div className="stat-number">{products.filter(p => p.available).length}</div>
            <div className="stat-label">–í –Ω–∞–ª–∏—á–∏–∏</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üöó</div>
          <div className="stat-content">
            <div className="stat-number">{vehicles.length}</div>
            <div className="stat-label">–í–µ–∑–¥–µ—Ö–æ–¥–æ–≤</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">‚≠ê</div>
          <div className="stat-content">
            <div className="stat-number">{popularProductIds.length}</div>
            <div className="stat-label">–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üí∞</div>
          <div className="stat-content">
            <div className="stat-number">{Math.round(products.reduce((sum, p) => sum + (p.price * (p.quantity || 0)), 0) / 1000)}–ö</div>
            <div className="stat-label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞</div>
          </div>
        </div>
      </div>

      <div className="recent-section">
        <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h3>
        <div className="product-list">
          {(() => {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ ID –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
            const popularProducts = popularProductIds
              .map(id => products.find(p => p.id === id))
              .filter(Boolean) // –£–±–∏—Ä–∞–µ–º undefined –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
              .slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ç–æ–≤–∞—Ä–æ–≤
            
            return popularProducts.length > 0 ? popularProducts.map(product => (
            <div key={product.id} className="product-item">
              {(() => {
                const migratedProduct = migrateProductImages(product);
                const mainImage = getMainImage(migratedProduct);
                
                if (mainImage?.data) {
                  if (
                    typeof mainImage.data === 'string' &&
                    (mainImage.data.startsWith('data:image') || mainImage.data.startsWith('/uploads/') || mainImage.data.startsWith('http'))
                  ) {
                    return <img src={mainImage.data} alt={product.title} className="product-image-small" />;
                  }
                  return (
                    <span className="product-icon" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                      <BrandMark alt={product.title} style={{ height: 24 }} />
                    </span>
                  );
                }
                return (
                  <span className="product-icon" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                    <BrandMark alt={product.title} style={{ height: 24 }} />
                  </span>
                );
              })()}
              <div className="product-info">
                <div className="product-name">{product.title}</div>
                <div className="product-price">{product.price.toLocaleString()} ‚ÇΩ</div>
                <div className="product-quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity || 0} —à—Ç.</div>
              </div>
              <div className={`product-status ${product.available ? 'available' : 'unavailable'}`}>
                {product.available ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
              </div>
            </div>
            )) : (
              <div className="no-products">
                <p>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. <Link to="#" onClick={() => setActiveSection('popular')}>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</Link></p>
              </div>
            );
          })()}
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeSection) {
      case 'overview':
        return renderOverview();
      case 'products':
        return <ProductManagement />;
      case 'categories':
        return <CategoryManagement />;
      case 'popular':
        return <PopularProductsManagement />;
      case 'promotions':
        return <PromotionManagement />;
      case 'promocodes':
        return <PromocodeManagement />;
      case 'orders':
        return <OrderManagement />;
      case 'vehicles':
        return <VehiclesManagement />;
      case 'vehicleTypes':
        return <VehicleTypesManagement />;
      case 'filters':
        return <FilterManagement />;
      case 'content':
        return <ContentManagement />;
      case 'advertising':
        return <AdvertisingManagement />;
      case 'bot':
        return <BotManagement />;
      default:
        return renderOverview();
    }
  };

  return (
    <div className="admin-dashboard">
      <aside className="admin-sidebar">
        <div className="sidebar-header">
          <BrandLogo
            to="/admin/advanced"
            size="sm"
            onClick={(e) => {
              if (window.location.pathname === '/admin/advanced') {
                e.preventDefault();
                window.location.reload();
              } else {
                setActiveSection('overview');
                navigate('/admin/advanced');
              }
            }}
          />
          <p>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</p>
        </div>
        
        <nav className="sidebar-nav">
          {menuItems.map(item => (
            <button
              key={item.id}
              className={`nav-item ${activeSection === item.id ? 'active' : ''}`}
              onClick={() => setActiveSection(item.id)}
            >
              {item.icon}
              <span>{item.label}</span>
            </button>
          ))}
        </nav>
        
        <div className="sidebar-footer">
          <Link to="/" className="nav-item">
            <FaHome />
            <span>–ù–∞ —Å–∞–π—Ç</span>
          </Link>
          <button onClick={handleLogout} className="nav-item logout">
            <FaSignOutAlt />
            <span>–í—ã–π—Ç–∏</span>
          </button>
        </div>
      </aside>

      <main className="admin-main">
        <header className="admin-header">
          <h1>
            {menuItems.find(item => item.id === activeSection)?.label || '–û–±–∑–æ—Ä'}
          </h1>
          <div className="header-actions">
            {/* –≤—Ç–æ—Ä–∏—á–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª—ë–Ω –ø–æ –ø—Ä–æ—Å—å–±–µ */}
          </div>
        </header>
        
        <div className="admin-content">
          {renderContent()}
        </div>
      </main>
    </div>
  );
}

export default AdvancedAdminDashboard;